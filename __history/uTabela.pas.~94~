unit uTabela;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Data.DB, Vcl.Grids, FireDAC.Comp.Client,
  Vcl.DBGrids, Datasnap.DBClient, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  Vcl.ExtCtrls, Vcl.Imaging.pngimage, System.ImageList, Vcl.ImgList;

type
  TfrmTabela = class(TForm)
    PCLPrincipal: TPageControl;
    TSFields: TTabSheet;
    DBGrid1: TDBGrid;
    DSTableStructure: TDataSource;
    FDMetaInfoQuery: TFDMetaInfoQuery;
    FDMetaInfoQueryRECNO: TIntegerField;
    FDMetaInfoQueryCATALOG_NAME: TWideStringField;
    FDMetaInfoQuerySCHEMA_NAME: TWideStringField;
    FDMetaInfoQueryTABLE_NAME: TWideStringField;
    FDMetaInfoQueryCOLUMN_NAME: TWideStringField;
    FDMetaInfoQueryCOLUMN_POSITION: TIntegerField;
    FDMetaInfoQueryCOLUMN_DATATYPE: TIntegerField;
    FDMetaInfoQueryCOLUMN_TYPENAME: TWideStringField;
    FDMetaInfoQueryCOLUMN_ATTRIBUTES: TLongWordField;
    FDMetaInfoQueryCOLUMN_PRECISION: TIntegerField;
    FDMetaInfoQueryCOLUMN_SCALE: TIntegerField;
    FDMetaInfoQueryCOLUMN_LENGTH: TIntegerField;
    FDMetaInfoQueryDOMAIN: TStringField;
    FDMetaInfoQueryNOT_NULL: TIntegerField;
    Image1: TImage;
    ImageList1: TImageList;
    FDMetaInfoQueryPK: TStringField;
    procedure FDMetaInfoQueryCalcFields(DataSet: TDataSet);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
  private
    CurrentConnection: TFDConnection;
    CurrentTableName: String;
    function GetTableStructure(Connection: TFDConnection; TableName: String): TDataSet;
    { Private declarations }
  public
    { Public declarations }
    constructor Create(AOwner : TComponent; Connection: TFDConnection; TableName : String);
  end;

var
  frmTabela: TfrmTabela;

implementation

{$R *.dfm}

uses uDMFBExpert;

{ TfrmTabela }

constructor TfrmTabela.Create(AOwner: TComponent; Connection: TFDConnection; TableName: String);
begin
  inherited Create(AOwner);

  CurrentConnection := Connection;
  CurrentTableName  := TableName;

  Caption := TableName;
  GetTableStructure(CurrentConnection, CurrentTableName);
//  DSTableStructure.DataSet := dmFBExpert.GetTableStructure(Connection, TableName);
end;

procedure TfrmTabela.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  Check: Integer;
  R: TRect;
begin
  if Column.FieldName = 'NOT_NULL' then
     begin
       DBGrid1.Canvas.FillRect(Rect);
       Check := 0;
       if FDMetaInfoQuery.FieldByName('NOT_NULL').AsInteger = 1 then
          Check := DFCS_CHECKED;
       R:=Rect;
       InflateRect(R,-2,-2); //Diminue o tamanho do CheckBox
       DrawFrameControl(DBGrid1.Canvas.Handle,R,DFC_BUTTON, DFCS_BUTTONCHECK or Check);
     end;

  if Column.FieldName = 'PK' then
     begin
       DBGrid1.Canvas.FillRect(Rect);
       R:=Rect;
       InflateRect(R,-2,-2); //Diminue o tamanho do CheckBox
       if FDMetaInfoQuery.FieldByName('PK').AsInteger = 1 then
//          Canvas.Draw(R.Left, R.Top, ImageList1.draw);
          ImageList1.Draw(TDBGrid(Sender).Canvas, Rect.Left + (Rect.Width div 2) - 7,Rect.Top + 1, 0);
     end;
end;

procedure TfrmTabela.FDMetaInfoQueryCalcFields(DataSet: TDataSet);
var
  MyDataSet : TDataSet;
begin
  MyDataSet := dmFBExpert.ReadFieldAttributes(CurrentConnection,
                                              CurrentTableName,
                                              FDMetaInfoQuery.FieldByName('COLUMN_NAME').AsString);
  if not MyDataSet.IsEmpty then
     begin
       FDMetaInfoQueryNOT_NULL.Value := MyDataSet.FieldByName('NAO_NULO').AsInteger;
       FDMetaInfoQueryDOMAIN.Value   := MyDataSet.FieldByName('DOMINIO').AsString;
       FDMetaInfoQueryPK.Value       := MyDataSet.FieldByName('PK').AsString;
     end;
end;

function TfrmTabela.GetTableStructure(Connection: TFDConnection; TableName: String): TDataSet;
begin
  FDMetaInfoQuery.Connection := Connection;
  FDMetaInfoQuery.MetaInfoKind := mkTableFields;
  FDMetaInfoQuery.ObjectName := TableName;
  FDMetaInfoQuery.Open();
  FDMetaInfoQuery.FetchAll();
  FDMetaInfoQuery.Offline();

  {Set the Connection,
           MetaInfoKind and
           optionally the CatalogName,
                          SchemaName,
                          BaseObjectName,
                          and ObjectName properties and open the dataset.}

  {------------------------------------}
  {------------------------------------}
end;

end.


{TFDDataType = (dtUnknown,                                              // unknown
                dtBoolean,                                              // Boolean
                dtSByte, dtInt16, dtInt32, dtInt64,                     // signed int
                dtByte, dtUInt16, dtUInt32, dtUInt64,                   // unsinged int
                dtSingle, dtDouble, dtExtended,                         // float point numbers
                dtCurrency, dtBCD, dtFmtBCD,                            // high-precision numbers
                dtDateTime, dtTime, dtDate, dtDateTimeStamp,            // date and time
                dtTimeIntervalFull, dtTimeIntervalYM, dtTimeIntervalDS, // time interval
                dtAnsiString, dtWideString, dtByteString,               // string
                dtBlob, dtMemo, dtWideMemo, dtXML,                      // value blobs
                dtHBlob, dtHMemo, dtWideHMemo,                          // handle blobs
                dtHBFile,                                               // external files
                dtRowSetRef, dtCursorRef, dtRowRef,
                dtArrayRef, dtParentRowRef,                             // adt -> ftDataSet, ftCursor, ftADT, ftArray
                dtGUID, dtObject);                                      // adt -> IFDDataStoredObject }
