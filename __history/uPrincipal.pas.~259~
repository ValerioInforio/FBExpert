unit uPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Stan.Async, FireDAC.DApt, Vcl.ExtCtrls, Vcl.ComCtrls, System.Generics.Collections,
  System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.Menus, Vcl.StdCtrls;

type
  TNodeType = (tntNone, tntDatabase, tntTable);

  TTreeNodeProperties = class(TTreeNode)
  protected
    procedure Assign(Source: TPersistent); override;
  public
    NodeType : TNodeType;
    NodeName : String;
    Connection : TFDConnection;
  end;
  TfrmPrincipal = class(TForm)
    PNLDatabases: TPanel;
    TVDatabases: TTreeView;
    ImageList: TImageList;
    DataSource1: TDataSource;
    FDMemTable1: TFDMemTable;
    MainMenu1: TMainMenu;
    Database1: TMenuItem;
    View1: TMenuItem;
    DBExplorer1: TMenuItem;
    RegisterDatabase1: TMenuItem;
    PPMNDATABASES: TPopupMenu;
    DatabaseRegistrationInfo1: TMenuItem;
    UnregisterDatabase1: TMenuItem;
    UnregisterDatabase2: TMenuItem;
    PNLPrincipal: TPanel;
    PNLStatusBar: TPanel;
    PPMNBUTTON: TPopupMenu;
    Close: TMenuItem;
    CloseAll: TMenuItem;
    Closeallexceptthis: TMenuItem;
    procedure FormCreate(Sender: TObject);
    procedure TVDatabasesDblClick(Sender: TObject);
    procedure DBExplorer1Click(Sender: TObject);
    procedure RegisterDatabase1Click(Sender: TObject);
    procedure DatabaseRegistrationInfo1Click(Sender: TObject);
    procedure UnregisterDatabase1Click(Sender: TObject);
    procedure UnregisterDatabase2Click(Sender: TObject);
    procedure TVDatabasesCreateNodeClass(Sender: TCustomTreeView;
      var NodeClass: TTreeNodeClass);
    procedure FormShow(Sender: TObject);
    procedure CloseClick(Sender: TObject);
  private
    { Private declarations }
    ListFDConnection: TObjectList<TFDConnection>;
    ListIDDatabases : TList<Integer>;
    procedure ClickButton(Sender: TObject);
    function LocateForm(Tabela: String): TForm;
    function LocateButton(Tabela: String): TButton;
  public
    { Public declarations }
    procedure CarregarDatabases();
  end;

var
  frmPrincipal: TfrmPrincipal;

implementation

{$R *.dfm}

uses uDMFBExpert, uRegistrarDatabase, uTabela;

procedure TfrmPrincipal.CarregarDatabases();
var
  DSDatabases: TDataSet;
  DatabaseNode: TTreeNodeProperties;
  FDConnection: TFDConnection;
begin
  DSDatabases := dmFBExpert.GetDatabases();
  TVDatabases.Items.Clear;

  ListFDConnection := TObjectList<TFDConnection>.Create();
  ListIDDatabases  := TList<Integer>.Create();
  if not(DSDatabases.IsEmpty) then
    begin
      DSDatabases.First();

      while not(DSDatabases.Eof) do
        begin
          DatabaseNode := TVDatabases.Items.AddChild(nil, DSDatabases.FieldByName('ALIAS').AsString) as TTreeNodeProperties;
          DatabaseNode.NodeType := tntDatabase;
//          DatabaseNode.StateIndex := 0;

          FDConnection := TFDConnection.Create(Self);
          FDConnection.DriverName := DSDatabases.FieldByName('DRIVER_ID').AsString;
          FDConnection.Params.Values['Database']  := DSDatabases.FieldByName('DATABASE').AsString;
          FDConnection.Params.Values['User_Name'] := DSDatabases.FieldByName('USER_NAME').AsString;
          FDConnection.Params.Values['Password']  := DSDatabases.FieldByName('PASSWORD').AsString;
          FDConnection.Params.Values['Protocol']  := DSDatabases.FieldByName('PROTOCOL').AsString;
          FDConnection.Params.Values['Server']    := DSDatabases.FieldByName('SERVER').AsString;
          FDConnection.Params.Values['Port']      := DSDatabases.FieldByName('PORT').AsString;
          FDConnection.Close();
          ListFDConnection.Add(FDConnection);
          ListIDDatabases.Add(DSDatabases.FieldByName('ID').AsInteger);

          DSDatabases.Next();
        end;
    end;
end;

procedure TfrmPrincipal.ClickButton(Sender: TObject);
var
  Formulario: TForm;
begin
  Formulario := LocateForm((Sender as TButton).Caption);
  if Assigned(Formulario) then
     Formulario.Show;
end;

procedure TfrmPrincipal.CloseClick(Sender: TObject);
var
  FRMDinamic: TForm;
  BTNDinamic: TButton;
  Tabela: String;
begin
  Tabela := ((Sender as TMenuItem).GetParentMenu as TPopupMenu).PopupComponent.Name;
  BTNDinamic := LocateButton(Tabela);
  if Assigned(BTNDinamic) then
     FRMDinamic := LocateForm(BTNDinamic.Caption);
  if Assigned(FRMDinamic) then
     begin
       FreeAndNil(FRMDinamic);
       BTNDinamic := LocateButton(Tabela);
       if Assigned(BTNDinamic) then
          FreeAndNil(BTNDinamic);
     end;
end;

procedure TfrmPrincipal.DatabaseRegistrationInfo1Click(Sender: TObject);
begin
  frmRegistrarDatabase := TfrmRegistrarDatabase.Create(Application, ListIDDatabases[TVDatabases.Selected.Index]);
  frmRegistrarDatabase.ShowModal();
  frmRegistrarDatabase.Free();
  CarregarDatabases();
end;

procedure TfrmPrincipal.DBExplorer1Click(Sender: TObject);
begin
  PNLDatabases.Visible := not PNLDatabases.Visible;
end;

procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
  CarregarDatabases();
end;

procedure TfrmPrincipal.FormShow(Sender: TObject);
begin
  WindowState := wsMaximized;
end;

function TfrmPrincipal.LocateButton(Tabela: String): TButton;
var
  NomeBotao: String;
  BTNDinamic: TButton;
begin
  NomeBotao := Tabela;
  BTNDinamic := (Application.FindComponent(NomeBotao) as TButton);

  Result := BTNDinamic;
end;

function TfrmPrincipal.LocateForm(Tabela: String): TForm;
var
  NomeFormulario: String;
  Formulario: TForm;
begin
  NomeFormulario := 'frmTB' + Tabela;
  Formulario := (Application.FindComponent(NomeFormulario) as TForm);

  Result := Formulario;
end;

procedure TfrmPrincipal.RegisterDatabase1Click(Sender: TObject);
begin
  frmRegistrarDatabase := TfrmRegistrarDatabase.Create(Application, 0);
  frmRegistrarDatabase.ShowModal();
  frmRegistrarDatabase.Free();
  CarregarDatabases();
end;

procedure TfrmPrincipal.TVDatabasesCreateNodeClass(Sender: TCustomTreeView;
  var NodeClass: TTreeNodeClass);
begin
  NodeClass := TTreeNodeProperties;
end;

procedure TfrmPrincipal.TVDatabasesDblClick(Sender: TObject);
var
  BTNDinamic : TButton;
  I: Integer;
//  J: Integer;
  Tables: TStringList;
  MenuNode: TTreeNodeProperties;
  TableNode: TTreeNodeProperties;
  FRMDinamic: TForm;
begin
  if (TVDatabases.Selected as TTreeNodeProperties).NodeType = tntDatabase then
     begin
      if not TVDatabases.Selected.HasChildren then
         begin
           Tables := TStringList.Create();
           ListFDConnection[TVDatabases.Selected.Index].GetTableNames('', '', '', Tables, [osMy], [tkTable]);

           MenuNode := TVDatabases.Items.addChild(TVDatabases.Selected, 'Tables (' + Tables.Count.ToString() + ')') as TTreeNodeProperties;
           MenuNode.ImageIndex := 0;
//           MenuNode.StateIndex := 0;
           for I := 0 to (Tables.Count - 1) do
             begin
               TableNode := TVDatabases.Items.addChild(MenuNode, Tables[i]) as TTreeNodeProperties;
               TableNode.NodeType   := tntTable;
               TableNode.NodeName   := Tables[i];
               TableNode.Connection := ListFDConnection[TVDatabases.Selected.Index];
               TableNode.ImageIndex := 1;
               TableNode.SelectedIndex := TableNode.ImageIndex;
             end;
         end;
     end;

  if (TVDatabases.Selected as TTreeNodeProperties).NodeType = tntTable then
     begin
       FRMDinamic := LocateForm((TVDatabases.Selected as TTreeNodeProperties).NodeName);
       if Assigned(FRMDinamic) then
          FRMDinamic.Show
       else
          begin
            frmTabela := TfrmTabela.Create(Application,
                                          (TVDatabases.Selected as TTreeNodeProperties).Connection,
                                          (TVDatabases.Selected as TTreeNodeProperties).NodeName);
            frmTabela.Parent := PNLPrincipal;
            frmTabela.Name := 'frmTB' + (TVDatabases.Selected as TTreeNodeProperties).NodeName;
            frmTabela.Show();

            BTNDinamic         := TButton.Create(Self);
            BTNDinamic.Name    := 'BTN' + (TVDatabases.Selected as TTreeNodeProperties).NodeName;
            BTNDinamic.Caption := (TVDatabases.Selected as TTreeNodeProperties).NodeName;
            BTNDinamic.Parent  := PNLStatusBar;
            BTNDinamic.Align   := alLeft;
            BTNDinamic.PopupMenu := PPMNBUTTON;

            BTNDinamic.OnClick := ClickButton;
    //       BTNDinamic.SetBounds(0, 0, 80, PNLStatusBar.ClientHeight);
          end;


     end;
end;

procedure TfrmPrincipal.UnregisterDatabase1Click(Sender: TObject);
begin
  dmFBExpert.DeleteDatabase(ListIDDatabases[TVDatabases.Selected.Index]);
  CarregarDatabases();
end;

procedure TfrmPrincipal.UnregisterDatabase2Click(Sender: TObject);
begin
  dmFBExpert.DeleteDatabase(ListIDDatabases[TVDatabases.Selected.Index]);
  CarregarDatabases();
end;

{ TTreeNodeProperties }

procedure TTreeNodeProperties.Assign(Source: TPersistent);
begin
  if Source is TTreeNodeProperties then
     begin
       NodeType   := TTreeNodeProperties(Source).NodeType;
       NodeName   := TTreeNodeProperties(Source).NodeName;
       Connection := TTreeNodeProperties(Source).Connection;
     end;
  inherited;
end;

end.
